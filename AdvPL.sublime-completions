{
	"scope": "source.AdvPL - variable.other.AdvPL",
	"completions":
	[
		"AdvPL",
/* A */		{ "trigger": "aAdd",			"contents": "aAdd(${1:aArray}, ${2:value})" },
/* A */		{ "trigger": "Abs",				"contents": "Abs(${1:number})" },
/* A */		{ "trigger": "Achoice",			"contents": "Achoice(${1:nTop}, ${2:nLeft}, ${3:nBottom}, ${4:nRight}, ${5:aItems})" },
/* A */		{ "trigger": "aClone",			"contents": "aClone(${1:aArray})" },
/* A */		{ "trigger": "aCopy",			"contents": "aCopy(${1:aSource}, ${2:aTarget})" },
/* A */		{ "trigger": "Addascii",		"contents": "Addascii(${1:cString},${2:nValue},${3:[nPos]})" },
/* A */		{ "trigger": "aDel",			"contents": "aDel(${1:aArray}, ${2:nPos})" },
/* A */		{ "trigger": "aDir",			"contents": "aDir(${1:cFileMask}, ${2:aName}, ${3:aSizes}, ${4:aDate}, ${5:aTime}, ${6:aAttr})" },
/* A */		{ "trigger": "aEVal",			"contents": "aEVal(${1:aArray}, \\{|${2:elem}| ${3:elem }\\}, ${4:nStart}, ${5:nCount})" },
/* A */		{ "trigger": "aFields",			"contents": "aFields(${1:aNames}, ${2:aTypes}, ${3:aLens}, ${4:aDecs})" },
/* A */		{ "trigger": "aFill",			"contents": "aFill(${1:aArray}, ${2:value})" },
/* A */		{ "trigger": "aIns",			"contents": "aIns(${1:aArray}, ${2:nPos})" },
/* A */		{ "trigger": "Alert",			"contents": "Alert(${1:cMensagem}, ${2:cTitulo})" },
/* A */		{ "trigger": "Alias",			"contents": "Alias(${1:nWorkArea})" },
/* A */		{ "trigger": "AllTrim",			"contents": "AllTrim(${1:cString})" },
/* A */		{ "trigger": "Altd",			"contents": "Altd(${1:[nAction]})" },
/* A */		{ "trigger": "Array",			"contents": "Array(${1:number})" },
/* A */		{ "trigger": "Asc",				"contents": "Asc(${1:cCharacter})" },
/* A */		{ "trigger": "aScan",			"contents": "aScan(${1:aArray}, ${2:expSearch})" },
/* A */		{ "trigger": "Ascpos",			"contents": "Ascpos(${1:cCharacter},${2:[nPos]})" },
/* A */		{ "trigger": "Asin",			"contents": "Asin(${1:nRadians})" },
/* A */		{ "trigger": "aSize",			"contents": "aSize(${1:aArray}, ${2:nLen})" },
/* A */		{ "trigger": "Asizealloc",		"contents": "Asizealloc(${1:aArray}, ${2:nCount})" },
/* A */		{ "trigger": "aSort",			"contents": "aSort(${1:aArray}, ${2:nStart}, ${3:nCount}, \\{|${4:x},${5:y}| ${4:x} < ${5:y}\\})" },
/* A */		{ "trigger": "At",				"contents": "At(${1:cSearch}, ${2:cString})" },
/* A */		{ "trigger": "aTail",			"contents": "aTail(${1:aArray})" },
/* A */		{ "trigger": "Atan",			"contents": "Atan(${1:nRadians})" },
/* A */		{ "trigger": "Atn2",			"contents": "Atn2(${1:nSine},${2:nCosine})" },
/* A */		{ "trigger": "Atnum",			"contents": "Atnum(${1:cSearch},${2:cString},${3:[nCount]},${4:[nSkipChars]})" },
/* B */		{ "trigger": "Bin2i",			"contents": "Bin2i(${1:cBuffer})" },
/* B */		{ "trigger": "Bin2l",			"contents": "Bin2l(${1:cBuffer})" },
/* B */		{ "trigger": "Bin2u",			"contents": "Bin2u(${1:cBuffer})" },
/* B */		{ "trigger": "Bin2w",			"contents": "Bin2w(${1:cBuffer})" },
/* B */		{ "trigger": "BOF",				"contents": "BOF()" },
/* B */		{ "trigger": "Break",			"contents": "Break(${1:xExp})" },
/* B */		{ "trigger": "Browse",			"contents": "Browse(${1:nTop}, ${2:nLeft}, ${3:nBottom}, ${4:nRight})" },
/* C */		{ "trigger": "CalcFieldSize",	"contents": "CalcFieldSize(${1:cTipo, ${2:nTaman}, ${3:nDecimal}, ${4:cPicture}, ${5:cTitulo}, ${6:oFont}})" },
/* C */		{ "trigger": "CDOW",			"contents": "CDOW(${1:dDate})" },
/* C */		{ "trigger": "Chr",				"contents": "Chr(${1:ascii})" },
/* C */		{ "trigger": "Clipinit",		"contents": "Clipinit()" },
/* C */		{ "trigger": "cMonth",			"contents": "cMonth(${1:dDate})" },
/* C */		{ "trigger": "Col",				"contents": "Col()" },
/* C */		{ "trigger": "Copy",			"contents": "Copy(${1:source}, ${2:dest})" },
/* C */		{ "trigger": "Cos",				"contents": "Cos(${1:arg})" },
/* C */		{ "trigger": "Count",			"contents": "Count()" },
/* C */		{ "trigger": "CToD",			"contents": "CToD(${1:cData})" },
/* C */		{ "trigger": "CurDir",			"contents": "CurDir(${1:cDrive})" },
/* C */		{ "trigger": "cValToChar",		"contents": "cValToChar(${1:nNumber})" },
/* D */		{ "trigger": "Date",			"contents": "Date()" },
/* D */		{ "trigger": "Day",				"contents": "Day(${1:cDate})" },
/* D */		{ "trigger": "Days",			"contents": "Days(${1:nSecs})" },
/* D */		{ "trigger": "dbAppend",		"contents": "dbAppend(${1:lLock})" },
/* D */		{ "trigger": "dbClearFilter",	"contents": "dbClearFilter()" },
/* D */		{ "trigger": "dbCloseAll",		"contents": "dbCloseAll()" },
/* D */		{ "trigger": "dbCloseArea",		"contents": "dbCloseArea()" },
/* D */		{ "trigger": "dbCommit",		"contents": "dbCommit()" },
/* D */		{ "trigger": "dbCreate",		"contents": "dbCreate(${1:cDbf}, ${2:aStruct}, ${3:[cDriver]}, ${4:[lOpen]}, ${5:[cAlias]})" },
/* D */		{ "trigger": "dbDelete",		"contents": "dbDelete()" },
/* D */		{ "trigger": "dbEdit",			"contents": "dbEdit(${1:[nTop]}, ${2:[nLeft]}, ${3:[nBottom]}, ${4:[nRight]}, ${5:[aColumns]}, ${6:[xUserFunc]}, ${7:[xColumnSayPictures]}, ${8:[xColumnHeaders]}, ${9:[xHeadingSeparators]}, ${10:[xColumnSeparators]}, ${11:[xFootingSeparators]}, ${12:[xColumnFootings]})" },
/* D */		{ "trigger": "dbEval",			"contents": "dbEval(${1:bBlock}, ${2:[bFor]}, ${3:[bWhile]}, ${4:[nNext]}, ${5:[nRecord]}, ${6:[lRest]})" },
/* D */		{ "trigger": "dbF",				"contents": "dbF()" },
/* D */		{ "trigger": "dbFilter",		"contents": "dbFilter()" },
/* D */		{ "trigger": "dbGoBottom",		"contents": "dbGoBottom()" },
/* D */		{ "trigger": "dbGoTo",			"contents": "dbGoTo(${1:nRecord})" },
/* D */		{ "trigger": "dbGoTop",			"contents": "dbGoTop()" },
/* D */		{ "trigger": "dbRecAll",		"contents": "dbRecAll()" },
/* D */		{ "trigger": "dbRlock",			"contents": "dbRlock(${1:[nRecord]})" },
/* D */		{ "trigger": "dbRlockList",		"contents": "dbRlockList()" },
/* D */		{ "trigger": "dbRunLock",		"contents": "dbRunLock()" },
/* D */		{ "trigger": "dbSeek",			"contents": "dbSeek(${1:expKey}, ${2:[lSoftSeek]}, ${3:[lFindLast]})" },
/* D */		{ "trigger": "dbSelectArea",	"contents": "dbSelectArea(${1:[xArea]})" },
/* D */		{ "trigger": "dbSetDriver",		"contents": "dbSetDriver(${1:[cDriver]})" },
/* D */		{ "trigger": "dbSetFilter",		"contents": "dbSetFilter(${1:bCondition}, ${2:[cCondition]})" },
/* D */		{ "trigger": "dbSkip",			"contents": "dbSkip(${1:nRecords})" },
/* D */		{ "trigger": "dbStruct",		"contents": "dbStruct()" },
/* D */		{ "trigger": "dbUnLock",		"contents": "dbUnLock()" },
/* D */		{ "trigger": "dbUnLockAll",		"contents": "dbUnLockAll()" },
/* D */		{ "trigger": "dbUseArea",		"contents": "dbUseArea(${1:[lNewArea]}, ${2:[cDriver]}, ${3:cName}, ${4:[xAlias]}, ${5:[lShared]}, ${6:[lReadonly]})" },
/* D */		{ "trigger": "Default",			"contents": "Default ${1:xVar} 			:= ${2:xCont}" },
/* D */		{ "trigger": "Define",			"contents": "#Define ${1:xVar}		${2:xCont}" },
/* D */		{ "trigger": "Deleted",			"contents": "Deleted()" },
/* D */		{ "trigger": "Descend",			"contents": "Descend(${1:xExp})" },
/* D */		{ "trigger": "DirChange",		"contents": "DirChange(${1:cDirectory})" },
/* D */		{ "trigger": "DiskSpace",		"contents": "DiskSpace(${1:nDrive})" },
/* D */		{ "trigger": "Do",				"contents": "Do(${1:xFuncProc}, ${2:[xArguments]})" },
/* D */		{ "trigger": "Dow",				"contents": "Dow(${1:dDate})" },
/* D */		{ "trigger": "DToC",			"contents": "DToC(${1:dData})" },
/* D */		{ "trigger": "DToS",			"contents": "DToS(${1:dData})" },
/* E */		{ "trigger": "ElapTime",		"contents": "ElapTime(${1:cStartTime}, ${2:cEndTime})" },
/* E */		{ "trigger": "Empty",			"contents": "Empty(${1:xExpr})" },
/* E */		{ "trigger": "EOF",				"contents": "EOF()" },
/* E */		{ "trigger": "ErrorSys",		"contents": "ErrorSys()" },
/* E */		{ "trigger": "EVal",			"contents": "EVal(${1:bBlock}, ${2:[xVal]})" },
/* E */		{ "trigger": "Exp",				"contents": "Exp(${1:nNumber})" },
/* F */		{ "trigger": "FClose",			"contents": "FClose(${1:nHandle})" },
/* F */		{ "trigger": "FCount",			"contents": "FCount()" },
/* F */		{ "trigger": "FCreate",			"contents": "FCreate(${1:cFile}, ${2:[nAttribute]})" },
/* F */		{ "trigger": "FErase",			"contents": "FErase(${1:cFile})" },
/* F */		{ "trigger": "FError",			"contents": "FError()" },
/* F */		{ "trigger": "FieldBlock",		"contents": "FieldBlock(${1:cFieldName})" },
/* F */		{ "trigger": "FieldGet",		"contents": "FieldGet(${1:nField})" },
/* F */		{ "trigger": "FieldName",		"contents": "FieldName(${1:nPosition})" },
/* F */		{ "trigger": "FieldPos",		"contents": "FieldPos(${1:cFieldName})" },
/* F */		{ "trigger": "FieldPut",		"contents": "FieldPut(${1:nField}, ${2:expAssign})" },
/* F */		{ "trigger": "FieldWBlock",		"contents": "FieldWBlock(${1:cFieldName}, ${2:nWorkArea})" },
/* F */		{ "trigger": "File",			"contents": "File(${1:cFile})" },
/* F */		{ "trigger": "FLock",			"contents": "FLock()" },
/* F */		{ "trigger": "FOpen",			"contents": "FOpen(${1:cFile}, ${2:[nMode]})" },
/* F */		{ "trigger": "Found",			"contents": "Found()" },
/* F */		{ "trigger": "FRead",			"contents": "FRead(${1:nHandle}, @${2:cBuffer}, ${3:nBytes})" },
/* F */		{ "trigger": "FReadStr",		"contents": "FReadStr(${1:nHandle}, ${2:nBytes})" },
/* F */		{ "trigger": "FRename",			"contents": "FRename(${1:cOldFile}, ${2:cNewFile})" },
/* F */		{ "trigger": "FSeek",			"contents": "FSeek(${1:nHandle}, ${2:nOffset}, ${3:[nOrigin]})" },
/* F */		{ "trigger": "FWrite",			"contents": "FWrite(${1:nHandle}, ${2:cBuffer}, ${3:[nBytes]})" },
/* G */		{ "trigger": "GetEnv",			"contents": "GetEnv(${1:cEnviroment}, ${2:cDefaultValue})" },
/* R */		{ "trigger": "GetArea",			"contents": "GetArea(${1:aArea})" },
/* I */		{ "trigger": "I2bin",			"contents": "I2bin(${1:number})" },
/* I */		{ "trigger": "If",				"contents": "If(${1:lCondition}, ${2:exprTrue}, ${3:exprFalse})" },
/* I */		{ "trigger": "IIf",				"contents": "IIf(${1:lCondition}, ${2:exprTrue}, ${3:exprFalse})" },
/* I */		{ "trigger": "Include",			"contents": "#Include \"${1:cInclude}.ch\"" },
/* I */		{ "trigger": "IndexExt",		"contents": "IndexExt()" },
/* I */		{ "trigger": "IndexKey",		"contents": "IndexKey(${1:nOrder})" },
/* I */		{ "trigger": "IndexOrd",		"contents": "IndexOrd()" },
/* I */		{ "trigger": "InKey",			"contents": "InKey(${1:nWaitSeconds}, ${2:nEventMask})" },
/* I */		{ "trigger": "Int",				"contents": "Int(${1:nNumber})" },
/* I */		{ "trigger": "Invertattr",		"contents": "Invertattr(${1:xColor})" },
/* I */		{ "trigger": "Invertwin",		"contents": "Invertwin(${1:nTop}, ${2:nLeft}, ${3:nBottom}, ${4:nRight})" },
/* I */		{ "trigger": "Isaffirm",		"contents": "Isaffirm(${1:cChar})" },
/* I */		{ "trigger": "IsAlNum",			"contents": "IsAlNum(${1:cString})" },
/* I */		{ "trigger": "IsAlPha",			"contents": "IsAlPha(${1:cString})" },
/* I */		{ "trigger": "IsCntrl",			"contents": "IsCntrl(${1:cString})" },
/* I */		{ "trigger": "IsColor",			"contents": "IsColor()" },
/* I */		{ "trigger": "IsDefColor",		"contents": "IsDefColor()" },
/* I */		{ "trigger": "IsDigit",			"contents": "IsDigit(${1:cString})" },
/* I */		{ "trigger": "IsDir",			"contents": "IsDir(${1:cDirSpec})" },
/* I */		{ "trigger": "IsDirectory",		"contents": "IsDirectory(${1:cDirName})" },
/* I */		{ "trigger": "IsDisk",			"contents": "IsDisk(${1:cDrive})" },
/* I */		{ "trigger": "IsGraph",			"contents": "IsGraph(${1:cString})" },
/* I */		{ "trigger": "IsLower",			"contents": "IsLower(${1:cString})" },
/* I */		{ "trigger": "IsNegative",		"contents": "IsNegative(${1:cChar})" },
/* I */		{ "trigger": "IsPrinter",		"contents": "IsPrinter(${1:cPrinterName})" },
/* I */		{ "trigger": "IsQuick",			"contents": "IsQuick(${1:cString})" },
/* I */		{ "trigger": "IsShortCut",		"contents": "IsShortCut(${1:cString})" },
/* I */		{ "trigger": "IsUpper",			"contents": "IsUpper(${1:cString})" },
/* I */		{ "trigger": "IsValidThRead",	"contents": "IsValidThRead(${1:xValue})" },
/* I */		{ "trigger": "IsXDigit",		"contents": "IsXDigit(${1:cString})" },
/* J */		{ "trigger": "JoinThRead",		"contents": "JoinThRead(${1:pThreadHandle})" },
/* J */		{ "trigger": "JustLeft",		"contents": "JustLeft(${1:cString}, ${2:[xChar}]})" },
/* K */		{ "trigger": "Kbdstat",			"contents": "Kbdstat()" },
/* K */		{ "trigger": "KeySec",			"contents": "KeySec(${1:nkey}, ${2:ntime}, ${3:[ncounter]}, ${4:[lmode]})" },
/* K */		{ "trigger": "KeyTime",			"contents": "KeyTime(${1:nkey}, ${2:ctime})" },
/* K */		{ "trigger": "KillAllThReads",	"contents": "KillAllThReads()" },
/* K */		{ "trigger": "KillThRead",		"contents": "KillThRead(${1:pthreadhandle})" },
/* K */		{ "trigger": "KSetCaps",		"contents": "KSetCaps(${1:[lnewmode]})" },
/* K */		{ "trigger": "KSetIns",			"contents": "KSetIns(${1:[lnewmode]})" },
/* K */		{ "trigger": "KSetNum",			"contents": "KSetNum(${1:[lnewmode]})" },
/* K */		{ "trigger": "KSetScroll2",		"contents": "KSetScroll2(${1:lnewmode})" },
/* L */		{ "trigger": "L2bin",			"contents": "L2bin(${1:nExp})" },
/* L */		{ "trigger": "LastKey",			"contents": "LastKey()" },
/* L */		{ "trigger": "LastRec",			"contents": "LastRec()" },
/* L */		{ "trigger": "Left",			"contents": "Left(${1:cString}, ${2:nCount})" },
/* L */		{ "trigger": "Len",				"contents": "Len(${1:value})" },
/* L */		{ "trigger": "Local",			"contents": "Local ${1:xVar} 			:= ${2:xCont}" },
/* L */		{ "trigger": "Log",				"contents": "Log(${1:nExp})" },
/* L */		{ "trigger": "Lower",			"contents": "Lower(${1:cString})" },
/* L */		{ "trigger": "LTrim",			"contents": "LTrim(${1:cString})" },
/* L */		{ "trigger": "LUpdate",			"contents": "LUpdate()" },
/* M */		{ "trigger": "Max",				"contents": "Max(${1:value1}, ${2:value2})" },
/* M */		{ "trigger": "MaxCol",			"contents": "MaxCol()" },
/* M */		{ "trigger": "MaxRow",			"contents": "MaxRow()" },
/* M */		{ "trigger": "MemoEdit",		"contents": "MemoEdit(${1:[cString]}, ${2:[nTop]}, ${3:[nLeft]}, ${4:[nBottom]}, ${5:[nRight]}, ${6:[lEditMode]}, ${7:[cUsrFunction]}, ${8:[nLineLength]}, ${9:[nTabSize]}, ${10:[nTxtBufferRow]}, ${11:[nTxtBufferCol]}, ${12:[nWindowRow]}, ${13:[nWindowCol]})" },
/* M */		{ "trigger": "MemoLine",		"contents": "MemoLine(${1:cString}, ${2:[nLineLength]}, ${3:[nLineNumber]}, ${4:[nTabSize]}, ${5:[lWrap]})" },
/* M */		{ "trigger": "MemoRead",		"contents": "MemoRead(${1:cFile})" },
/* M */		{ "trigger": "Memory",			"contents": "Memory(${1:nExp})" },
/* M */		{ "trigger": "MemoTran",		"contents": "MemoTran(${1:cString}, ${2:[cReplaceHardCR]}, ${3:[cReplaceSoftCR]})" },
/* M */		{ "trigger": "MemoWrit",		"contents": "MemoWrit(${1:cFile}, ${2:cString})" },
/* M */		{ "trigger": "MemVarBlock",		"contents": "MemVarBlock(${1:cMemVarName})" },
/* M */		{ "trigger": "Min",				"contents": "Min(${1:value1}, ${2:value2})" },
/* M */		{ "trigger": "MlCount",			"contents": "MlCount(${1:cString}, ${2:[nLineLength]}, ${3:[nTabSize]}, ${4:[lWrap]})" },
/* M */		{ "trigger": "MlCToPos",		"contents": "MlCToPos(${1:cString}, ${2:nWidth}, ${3:nLine}, ${4:nCol}, ${5:[nTabSize]}, ${6:[lWrap]})" },
/* M */		{ "trigger": "MlPos",			"contents": "MlPos(${1:cString}, ${2:nLineLength}, ${3:nLine}, ${4:[nTabSize]}, ${5:[lWrap]})" },
/* M */		{ "trigger": "Mod",				"contents": "Mod(${1:nDividend}, ${2:nDivisor})" },
/* M */		{ "trigger": "Month",			"contents": "Month(${1:dDate})" },
/* M */		{ "trigger": "MPosToLc",		"contents": "MPosToLc(${1:cString}, ${2:nWidth}, ${3:nPos}, ${4:[nTabSize]}, ${5:[lWrap]})" },
/* M */		{ "trigger": "MsgInfo",			"contents": "MsgInfo(${1:cMensagem}, ${2:cTitulo})" },
/* M */		{ "trigger": "MsgNoYes",		"contents": "MsgNoYes(${1:cMensagem}, ${2:cTitulo})" },
/* M */		{ "trigger": "MsgYesNo",		"contents": "MsgYesNo(${1:cMensagem}, ${2:cTitulo})" },
/* N */		{ "trigger": "NationMsg",		"contents": "NationMsg(${1:nMsg})" },
/* N */		{ "trigger": "NetErr",			"contents": "NetErr(${1:[lNewError]})" },
/* N */		{ "trigger": "NetName",			"contents": "NetName()" },
/* N */		{ "trigger": "NextKey",			"contents": "NextKey()" },
/* N */		{ "trigger": "Nosnow",			"contents": "Nosnow(${1:lToggle})" },
/* O */		{ "trigger": "OrdBagExt",		"contents": "OrdBagExt()" },
/* O */		{ "trigger": "OrdBagName",		"contents": "OrdBagName(${1:orderNumOrName})" },
/* O */		{ "trigger": "OrdCondSet",		"contents": "OrdCondSet(${1:[cForCondition]}, ${2:[bForCondition]}, ${3:[lAll]}, ${4:[bWhileCondition]}, ${5:[bEval]}, ${6:[nInterval]}, ${7:[nStart]}, ${8:[nNext]}, ${9:[nRecord]}, ${10:[lRest]}, ${11:[lDescend]}, ${12:[lAdditive]}, ${13:[lCurrent]}, ${14:[lCustom]}, ${15:[lNoOptimize]})" },
/* O */		{ "trigger": "OrdCreate",		"contents": "OrdCreate(${1:cOrderBagName}, ${2:[cOrderName]}, ${3:[bExpKey]}, ${4:[lUnique]})" },
/* O */		{ "trigger": "OrdDestroy",		"contents": "OrdDestroy(${1:cOrderName}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "OrdFor",			"contents": "OrdFor(${1:orderNumOrName}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "OrdKey",			"contents": "OrdKey(${1:orderNumOrName}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "OrdListAdd",		"contents": "OrdListAdd(${1:cOrderBagName}, ${2:[cOrderName]})" },
/* O */		{ "trigger": "OrdListClear",	"contents": "OrdListClear()" },
/* O */		{ "trigger": "OrdListReBuild",	"contents": "OrdListReBuild()" },
/* O */		{ "trigger": "OrdName",			"contents": "OrdName(${1:nOrder}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "OrdNumber",		"contents": "OrdNumber(${1:cOrderName}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "OrdSetFocus",		"contents": "OrdSetFocus(${1:[orderNumOrName]}, ${2:[cOrderBagName]})" },
/* O */		{ "trigger": "Os",				"contents": "Os()" },
/* O */		{ "trigger": "OutErr",			"contents": "OutErr(${1:expList})" },
/* O */		{ "trigger": "OutStd",			"contents": "OutStd(${1:expList})" },
/* P */		{ "trigger": "PadC",			"contents": "PadC(${1:exp}, ${2:nLength}, ${3:[cFillChar]})" },
/* P */		{ "trigger": "PadL",			"contents": "PadL(${1:exp}, ${2:nLength}, ${3:[cFillChar]})" },
/* P */		{ "trigger": "PadR",			"contents": "PadR(${1:exp}, ${2:nLength}, ${3:[cFillChar]})" },
/* P */		{ "trigger": "PCol",			"contents": "PCol()" },
/* P */		{ "trigger": "PCount",			"contents": "PCount()" },
/* P */		{ "trigger": "Private",			"contents": "Private ${1:xVar} 			:= ${2:xCont}" },
/* P */		{ "trigger": "ProcLine",		"contents": "ProcLine(${1:[nActivation]})" },
/* P */		{ "trigger": "ProcName",		"contents": "ProcName(${1:[nActivation]})" },
/* P */		{ "trigger": "PRow",			"contents": "PRow()" },
/* Q */		{ "trigger": "QOut",			"contents": "QOut(${1:[explist]})" },
/* Q */		{ "trigger": "QQOut",			"contents": "QQOut(${1:[explist]})" },
/* R */		{ "trigger": "Rat",				"contents": "Rat(${1:cSearch}, ${2:cTarget})" },
/* R */		{ "trigger": "ReadExit",		"contents": "ReadExit(${1:[lToggle]})" },
/* R */		{ "trigger": "ReadInsert",		"contents": "ReadInsert(${1:[lToggle]})" },
/* R */		{ "trigger": "ReadKey",			"contents": "ReadKey()" },
/* R */		{ "trigger": "ReadModal",		"contents": "ReadModal(${1:aGetList})" },
/* R */		{ "trigger": "ReadVar",			"contents": "ReadVar()" },
/* R */		{ "trigger": "RecCount",		"contents": "RecCount()" },
/* R */		{ "trigger": "Recno",			"contents": "Recno()" },
/* R */		{ "trigger": "RecSize",			"contents": "RecSize()" },
/* R */		{ "trigger": "Replicate",		"contents": "Replicate(${1:cString}, ${2:nCount})" },
/* R */		{ "trigger": "RestScreen",		"contents": "RestScreen(${1:[nTop]}, ${2:[nLeft]}, ${3:[nBottom]}, ${4:[nRight]}, ${5:cScreen})" },
/* R */		{ "trigger": "Right",			"contents": "Right(${1:cString}, ${2:nCount})" },
/* R */		{ "trigger": "RLock",			"contents": "RLock()" },
/* R */		{ "trigger": "Round",			"contents": "Round(${1:nNumber}, ${2:nDecimals})" },
/* R */		{ "trigger": "Row",				"contents": "Row()" },
/* R */		{ "trigger": "RTrim",			"contents": "RTrim(${1:cString})" },
/* R */		{ "trigger": "RestArea",		"contents": "RestArea(${1:aArea})" },
/* S */		{ "trigger": "SaveScreen",		"contents": "SaveScreen(${1:[nTop]}, ${2:[nLeft]}, ${3:[nBottom]}, ${4:[nRight]})" },
/* S */		{ "trigger": "Scroll",			"contents": "Scroll(${1:[nTop]}, ${2:[nLeft]}, ${3:[nBottom]}, ${4:[nRight]}, ${5:[nVert]}, ${6:[nHoriz]})" },
/* S */		{ "trigger": "Seconds",			"contents": "Seconds()" },
/* S */		{ "trigger": "Select",			"contents": "Select(${1:[cAlias]})" },
/* S */		{ "trigger": "Set",				"contents": "Set(${1:nSpecifier}, ${2:[expNewSetting]}, ${3:[lOpenMode]})" },
/* S */		{ "trigger": "SetBlink",		"contents": "SetBlink(${1:[lToggle]})" },
/* S */		{ "trigger": "SetCancel",		"contents": "SetCancel(${1:[lToggle]})" },
/* S */		{ "trigger": "SetColor",		"contents": "SetColor(${1:[cColorString]})" },
/* S */		{ "trigger": "SetCursor",		"contents": "SetCursor(${1:[nCursorShape]})" },
/* S */		{ "trigger": "SetKey",			"contents": "SetKey(${1:nKeyCode}, ${2:[bAction]})" },
/* S */		{ "trigger": "SetMode",			"contents": "SetMode(${1:nRows}, ${2:nCols})" },
/* S */		{ "trigger": "SetPos",			"contents": "SetPos(${1:nRow}, ${2:nCol})" },
/* S */		{ "trigger": "SetPrc",			"contents": "SetPrc(${1:nRow}, ${2:nCol})" },
/* S */		{ "trigger": "SoundEx",			"contents": "SoundEx(${1:cString})" },
/* S */		{ "trigger": "Space",			"contents": "Space(${1:nCount})" },
/* S */		{ "trigger": "SQrt",			"contents": "SQrt(${1:nNumber})" },
/* S */		{ "trigger": "Static",			"contents": "Static ${1:xVar} 			:= ${2:xCont}" },
/* S */		{ "trigger": "SToD",			"contents": "SToD(${1:dData})" },
/* S */		{ "trigger": "Str",				"contents": "Str(${1:nNumber}, ${2:[nLength]}, ${3:[nDecimals]})" },
/* S */		{ "trigger": "StrTran",			"contents": "StrTran(${1:cString}, ${2:cSearch}, ${3:[cReplace]}, ${4:[nStart]}, ${5:[nCount]})" },
/* S */		{ "trigger": "Stuff",			"contents": "Stuff(${1:cString}, ${2:nStart}, ${3:nDelete}, ${4:cInsert})" },
/* S */		{ "trigger": "SubStr",			"contents": "SubStr(${1:cString}, ${2:nStart}, ${3:[nCount]})" },
/* S */		{ "trigger": "SuperGetMV",		"contents": "SuperGetMV(${1:cParametro}, ${2:lHelp}, ${3:cPadrao}, ${4:cFilial})" },
/* X */		{ "trigger": "xFilial",			"contents": "xFilial(${1:cArquivo} )" }
	]
}

